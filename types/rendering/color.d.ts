type HexColor = `#${string}`;
type RgbColor = `rgb(${number}, ${number}, ${number})`;
type RgbaColor = `rgba(${number}, ${number}, ${number}, ${number})`;
type HslColor = `hsl(${number}, ${number}%, ${number}%)`;
type HslaColor = `hsla(${number}, ${number}%, ${number}%, ${number})`;
export type ColorString = string & (HexColor | RgbColor | RgbaColor | HslColor | HslaColor);
export declare class Color {
    static BLACK: ColorString;
    static WHITE: ColorString;
    static GRAY: ColorString;
    static RED: ColorString;
    static GREEN: ColorString;
    static BLUE: ColorString;
    static YELLOW: ColorString;
    static ORANGE: ColorString;
    static PURPLE: ColorString;
    static TRANSPARENT: ColorString;
    readonly red: number;
    readonly green: number;
    readonly blue: number;
    readonly alpha: number;
    constructor(red: number, green: number, blue: number, alpha?: number);
    static rgb(r: number, g: number, b: number): ColorString;
    static rgba(r: number, g: number, b: number, a: number): ColorString;
    static hsl(h: number, s: number, l: number): ColorString;
    static hsla(h: number, s: number, l: number, a: number): ColorString;
    static extract(color: ColorString): Color;
    static fromRgb(r: number, g: number, b: number): Color;
    static fromRgba(r: number, g: number, b: number, a: number): Color;
    static fromHsl(h: number, s: number, l: number): Color;
    static fromHsla(h: number, s: number, l: number, a: number): Color;
    toString(): ColorString;
}
export {};
